---
title: "MODELOS LINEARES GENERALIZADOS (EST082)"
subtitle: "LISTA 2 - Dados contínuos e positivos"
lang: pt
author: "Jaqueline Lamas da Silva"
knitr:
    opts_chunk: 
      fig.align: 'center'
format: 
  html:
    self-contained-math: true
    embed-resources: true
    code-fold: true
toc: true
editor: source
---


```{r, echo=FALSE, warning=FALSE}
rm(list = ls(all = TRUE))
suppressMessages(library("dplyr"))
suppressMessages(library("MASS"))
suppressMessages(library("readr"))
source("MLG/Funcoes/StepBackwardF.R")
source('MLG/Funcoes/envelope.r')

cores<-c("#BAF3DE","#C9E69E","#FFC29A","#FF9B95")


```

# Exercício 7

```{r}
suppressMessages(vidros <- read_table("dados/lista2/vidros.txt", 
    col_names = FALSE, col_types = cols(X2 = col_factor(levels = c("1","2", "3", "4")), X3 = col_factor(levels = c("1", "2")))))
colnames(vidros)<-c("resistencia","voltagem","temperatura")

vidros<-vidros |>
  mutate(voltagem=factor(voltagem, levels = c(1:4),labels = paste0(150+c(1:4)*50,"kV")), temperatura = factor(temperatura, 1:2, labels=c("170°C","180°C")))
```


## Análise Exploratória

```{r}
suppressMessages(attach(vidros))
boxplot(resistencia~voltagem, col=cores)
```
Os vidros parecem resistir por mais tempo a voltagens menores.

```{r}
boxplot(resistencia~temperatura, col=cores)
```
A temperatura apresenta uma mediana levemente menor, ou seja, talvez os vidros sejam menos resistentes a temperaturas maiores.


## Seleção do modelo

### Normal
```{r}
modelo<-resistencia ~ voltagem + temperatura

selecaoModeloNormal<-function(dados, modelo, ligacao)
{
  fit1<- switch(ligacao,
                identity = glm(modelo, family=gaussian),
                log = glm(modelo, family=gaussian(link=log)),
                inverse = glm(modelo, family=gaussian(link=inverse)),
                stop("Link não reconhecido"))
  fit.model<-stepAIC(fit1, trace=0)
  return(fit.model)
}
selecaoModeloNormal(vidros, modelo, ligacao = "identity")
selecaoModeloNormal(vidros, modelo, ligacao = "log")
selecaoModeloNormal(vidros, modelo, ligacao = "inverse")

ResultadosNormal<-function(dados, modelo, ligacao, tipo, alfa=0.05)
{
  n<-nrow(dados)
  familia<-paste0("Normal-Link(",ligacao,")")
  fits<-selecaoModeloNormal(dados, modelo, ligacao)
  bic<-as.numeric(round(AIC(fits,k=log(n)),6))
  modelo.s<-deparse(formula(fits))
  teste<-try(envelope(fits,tipo), silent=T)
  aux<-sum(class(teste) != "try-error")
  if(aux==0)
  {
    qualidade<-"Não Rodou"
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))
  }else{
    qualidade<-teste[[1]]
    replayPlot(teste[[2]])
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))

  }
}

ResultadosNormal(vidros, modelo, ligacao = "identity", tipo ="envel_norm")
ResultadosNormal(vidros, modelo, ligacao = "log", tipo ="envel_norm_log")
ResultadosNormal(vidros, modelo, ligacao = "inverse", tipo ="envel_norm_inverse")

  
```

### Gama

```{r}
selecaoModeloGama<-function(dados, modelo, ligacao)
{
  fit1<- switch(ligacao,
                identity = glm(modelo, family=Gamma),
                log = glm(modelo, family=Gamma(link=log)),
                inverse = glm(modelo, family=Gamma(link=inverse)),
                stop("Link não reconhecido"))
  fit.model<-stepAIC(fit1, trace=0)
  return(fit.model)
}
selecaoModeloGama(vidros, modelo, ligacao = "identity")
selecaoModeloGama(vidros, modelo, ligacao = "log")
selecaoModeloGama(vidros, modelo, ligacao = "inverse")

ResultadosGama<-function(dados, modelo, ligacao, tipo, alfa=0.05)
{
  n<-nrow(dados)
  familia<-paste0("Gamma-Link(",ligacao,")")
  fits<-selecaoModeloGama(dados, modelo, ligacao)
  bic<-as.numeric(round(AIC(fits,k=log(n)),6))
  modelo.s<-deparse(formula(fits))
  teste<-try(envelope(fits,tipo), silent=T)
  aux<-sum(class(teste) != "try-error")
  if(aux==0)
  {
    qualidade<-"Não Rodou"
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))
  }else{
    qualidade<-teste[[1]]
    replayPlot(teste[[2]])
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))

  }
}

ResultadosGama(vidros, modelo, ligacao = "identity", tipo ="envel_gama")
ResultadosGama(vidros, modelo, ligacao = "log", tipo ="envel_gama_log")
ResultadosGama(vidros, modelo, ligacao = "inverse", tipo ="envel_gama_inverse")

```

### Normal Inversa

```{r}
selecaoNI<-function(dados, modelo, ligacao)
{
  fit1<- switch(ligacao,
                inverse2 = glm(modelo, family=inverse.gaussian),
                log = glm(modelo, family=inverse.gaussian(link=log)),
                inverse = glm(modelo, family=inverse.gaussian(link=inverse)),
                identity= glm(modelo, family=inverse.gaussian(link=identity)),
                stop("Link não reconhecido"))
  fit.model<-stepAIC(fit1, trace=0)
  return(fit.model)
}
selecaoNI(vidros, modelo, ligacao = "inverse2")
selecaoNI(vidros, modelo, ligacao = "identity")
selecaoNI(vidros, modelo, ligacao = "log")
selecaoNI(vidros, modelo, ligacao = "inverse")

ResultadosNI<-function(dados, modelo, ligacao, tipo, alfa=0.05)
{
  n<-nrow(dados)
  familia<-paste0("Normal Inversa-Link(",ligacao,")")
  fits<-selecaoNI(dados, modelo, ligacao)
  bic<-as.numeric(round(AIC(fits,k=log(n)),6))
  modelo.s<-deparse(formula(fits))
  teste<-try(envelope(fits,tipo), silent=T)
  aux<-sum(class(teste) != "try-error")
  if(aux==0)
  {
    qualidade<-"Não Rodou"
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))
  }else{
    qualidade<-teste[[1]]
    replayPlot(teste[[2]])
    return(data.frame(Family=familia,
                      QQplot=qualidade,
                      BIC=bic,
                      Modelo=modelo.s))

  }
}

ResultadosNI(vidros, modelo, ligacao = "identity", tipo ="envel_ninv")
ResultadosNI(vidros, modelo, ligacao = "log", tipo ="envel_ninv_log")
ResultadosNI(vidros, modelo, ligacao = "inverse", tipo ="envel_ninv_inverse")
ResultadosNI(vidros, modelo, ligacao = "inverse2", tipo ="envel_ninv_inverse2")

```
```{r}
selecaoModelo<-rbind(
ResultadosNI(vidros, modelo, ligacao = "identity", tipo ="envel_ninv"),
ResultadosNI(vidros, modelo, ligacao = "log", tipo ="envel_ninv_log"),
ResultadosNI(vidros, modelo, ligacao = "inverse", tipo ="envel_ninv_inverse"),
ResultadosNI(vidros, modelo, ligacao = "inverse2", tipo ="envel_ninv_inverse2"),
ResultadosGama(vidros, modelo, ligacao = "identity", tipo ="envel_gama"),
ResultadosGama(vidros, modelo, ligacao = "log", tipo ="envel_gama_log"),
ResultadosGama(vidros, modelo, ligacao = "inverse", tipo ="envel_gama_inverse"),
ResultadosNormal(vidros, modelo, ligacao = "identity", tipo ="envel_norm"),
ResultadosNormal(vidros, modelo, ligacao = "log", tipo ="envel_norm_log"),
ResultadosNormal(vidros, modelo, ligacao = "inverse", tipo ="envel_norm_inverse")
)

selecaoModelo |>
  arrange(BIC)
```







